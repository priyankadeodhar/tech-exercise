
InstructionRecord.java

package com.data;
public class InstructionRecord implements Comparable<InstructionRecord>{
	
	private String entity=null;
	private char buyOrSell=0;
	private float agreedFx=0.0f;
	private String currency=null;
	private String instructionDate=null;
	private String settlementDate=null;
	private int units=0;
	private float pricePerUnit =0.0f;
	private int rank =0;
	
	private double usdAmountOFTrade =0.0d;
	
	public String getEntity() {
		return entity;
	}
	public void setEntity(String entity) {
		this.entity = entity;
	}
	public char getBuyOrSell() {
		return buyOrSell;
	}
	public void setBuyOrSell(char buyOrSell) {
		this.buyOrSell = buyOrSell;
	}
	public float getAgreedFx() {
		return agreedFx;
	}
	public void setAgreedFx(float agreeFx) {
		this.agreedFx = agreeFx;
	}
	public String getCurrency() {
		return currency;
	}
	public void setCurrency(String currency) {
		this.currency = currency;
	}
	public String getInstructionDate() {
		return instructionDate;
	}
	public void setInstructionDate(String instructionDate) {
		this.instructionDate = instructionDate;
	}
	public String getSettlementDate() {
		return settlementDate;
	}
	public void setSettlementDate(String settlementDate) {
		this.settlementDate = settlementDate;
	}
	public int getUnits() {
		return units;
	}
	public void setUnits(int units) {
		this.units = units;
	}
	public float getPricePerUnit() {
		return pricePerUnit;
	}
	public void setPricePerUnit(float pricePerUnit) {
		this.pricePerUnit = pricePerUnit;
	}
	public double getUsdAmountOFTrade() {
		return usdAmountOFTrade;
	}
	public void setUsdAmountOFTrade(double usdAmountOFTrade) {
		this.usdAmountOFTrade = usdAmountOFTrade;
	}
	public int getRank() {
		return rank;
	}
	public void setRank(int rank) {
		this.rank = rank;
	}

	public String toString()
	{
			
		return (entity+" | "+buyOrSell+" | "+agreedFx+" | "+currency+" | "+instructionDate+" | "+settlementDate+ " | "+units+" | "+pricePerUnit+" | "+usdAmountOFTrade+" | "+rank);
	}
	@Override
	public int compareTo(InstructionRecord ir) {
		
		return new Double(ir.getUsdAmountOFTrade()).compareTo(usdAmountOFTrade);
	}
}


CreateData.java
package com.data;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class CreateData {
			
		public static ArrayList<InstructionRecord> createInstructionRecordListFromFile(){
		String line=null;
		ArrayList<InstructionRecord> inputDataList = new ArrayList<InstructionRecord>();
		
		try
		{
			
			String currentDir=System.getProperty("user.dir");
			FileReader fr= new FileReader(currentDir+"\\inputData.txt");
			Scanner s= new Scanner(fr);
			
			while(s.hasNext() )
			{
				 line=s.next();
				String[] lineStr= line.split(",");
			 if(lineStr!=null && lineStr.length!=0)
			 {
				inputDataList.add(createInstructionRecord(lineStr));
			 }
				
			}
			
			s.close();
		}
		
		catch(FileNotFoundException f)
		{
			f.printStackTrace();
		} 
		catch(NoSuchElementException e)
		{
			e.printStackTrace();
		}
		catch(ParseException pe)
		{
			pe.printStackTrace();
		
		}
		return inputDataList;
		}
	public static InstructionRecord createInstructionRecord(String[] lineStr ) throws ParseException
	{
		InstructionRecord record = new InstructionRecord();
		record.setEntity(lineStr[0]);
		record.setBuyOrSell(lineStr[1].charAt(0));
		record.setAgreedFx(Float.parseFloat(lineStr[2]));
		record.setCurrency(lineStr[3]);
		record.setInstructionDate(lineStr[4]);
		record.setSettlementDate(lineStr[5]);
		record.setUnits(Integer.parseInt(lineStr[6]));
		record.setPricePerUnit(Float.parseFloat(lineStr[7]));
		
		record.setUsdAmountOFTrade(record.getAgreedFx()*record.getPricePerUnit()*record.getUnits());
		return record;
	}
	
	public static void displayInstructionRecordList(ArrayList<InstructionRecord> inputDataList)
	{
		for (InstructionRecord ir:inputDataList)
		{
			System.out.println(ir);
		}
	}
	
	
}

Constants.java
package com.data;

public class Constants {

	public static final String AED ="AED";
	public static final String SAR ="SAR";
	public static final char BUY ='B';
	public static final char SELL ='S';
}

CreateOutput.java
package com.data;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Locale;

public class CreateOutput {

	public static void main(String[] args) {
	
		ArrayList<InstructionRecord> instructionRecordList =CreateData.createInstructionRecordListFromFile();
		if(instructionRecordList!=null && !instructionRecordList.isEmpty())
		updateSettlementRecord(instructionRecordList);
		totalUSDIncomingOutgoingForToday(instructionRecordList);
		sortArrayListBasedOnUSD(instructionRecordList);
		displayOutput(instructionRecordList);
	}
	
	public static void updateSettlementRecord(ArrayList<InstructionRecord> instructionRecordList)
	{
		for(InstructionRecord ir:instructionRecordList)
		{
			
		ir.setSettlementDate(getNewSettlementDate(ir.getCurrency(),ir.getSettlementDate()));
			
		}
	}
	
	public static String getNewSettlementDate(String currencyType,String settlementDate)
	{
		Date date=null;
		SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy",Locale.UK);
		try {
			date = format.parse(settlementDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		 Calendar c=Calendar.getInstance();
		 c.setTime(date);
		 int dayOfWeek=c.get(Calendar.DAY_OF_WEEK);
		 if(currencyType.equals(Constants.SAR) || currencyType.equals(Constants.AED)  )
		 {
			 switch(dayOfWeek)
			 {
			 case Calendar.FRIDAY :  c.add(Calendar.DATE ,2);
			 break;
			 case Calendar.SATURDAY :c.add(Calendar.DATE ,1);
			 break;
			 }
		
		}
		 else{
			 switch(dayOfWeek)
			 {
			 case Calendar.SATURDAY:  c.add(Calendar.DATE ,2);
			 break;
			 case Calendar.SUNDAY :c.add(Calendar.DATE ,1);
			 break;
			 }
		 }
		 format.format(c.getTime());
		 settlementDate = format.format(c.getTime());
		 return settlementDate;
	}
	
	
	//Calculate total amount USD settled incoming everyday
	public static void totalUSDIncomingOutgoingForToday(ArrayList<InstructionRecord> instructionRecordList)
	{
		SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy",Locale.UK);
		Calendar currentDateCal= Calendar.getInstance();
		String currentDate = format.format(currentDateCal.getTime());
	
		double totalUSDIncoming = 0.0d;
		double totalUSDOutgoing = 0.0d;
		
		for(InstructionRecord ir:instructionRecordList)
		{	
			if(ir.getSettlementDate().equals(currentDate))
			{
				if(ir.getBuyOrSell() == Constants.BUY)
				{
					totalUSDIncoming+=ir.getUsdAmountOFTrade();
				}
				if(ir.getBuyOrSell() == Constants.SELL)
				{
					totalUSDOutgoing+=ir.getUsdAmountOFTrade();
				}
			}
			
				
			
		}
		
		System.out.println("Amount USD settled incoming today == "+totalUSDIncoming);
		System.out.println("Amount USD settled Outgoing today == "+totalUSDOutgoing);
		
		
		
	}

	public static void sortArrayListBasedOnUSD(ArrayList<InstructionRecord> instructionRecordList)
	{
		
		ArrayList<InstructionRecord> buyList = new ArrayList<InstructionRecord> ();
		ArrayList<InstructionRecord> sellList = new ArrayList<InstructionRecord> ();
		for(InstructionRecord ir:instructionRecordList)
		{	
			if(ir.getBuyOrSell() == Constants.BUY)
			{
				buyList.add(ir);
			}
			if(ir.getBuyOrSell() == Constants.SELL)
			{
				sellList.add(ir);
			}
		}
		Collections.sort(buyList);
		Collections.sort(sellList);
		
		
				
				int rank=0;
				for(InstructionRecord ir1:buyList)
				{
					ir1.setRank(++rank);
				}
				rank=0;
				for(InstructionRecord ir1:sellList)
				{
					ir1.setRank(++rank);
				}
				
				ArrayList<InstructionRecord> finalInstructionRecordList = new ArrayList<InstructionRecord>();
				finalInstructionRecordList.addAll(buyList);
				finalInstructionRecordList.addAll(sellList);
				instructionRecordList.clear();
				instructionRecordList.addAll(finalInstructionRecordList);
				finalInstructionRecordList=null;
				}
	
	public static void displayOutput(ArrayList<InstructionRecord> inputDataList)
	{
	
		System.out.println("Identity  |  Buy/Sell  |  USD Amount  |  Rank");
		for (InstructionRecord ir:inputDataList)
		{
			
			System.out.println(ir.getEntity()+ "	|	"+ir.getBuyOrSell()+"	|	"+ ir.getUsdAmountOFTrade()+"	|	"+ir.getRank());
		}
	}
}


inputData.txt

foo,B,0.50,SAR,13-May-2017,14-May-2017,200,100.25
bar,S,0.22,AED,12-May-2017,13-May-2017,450,10.5
bar,S,0.22,AED,12-May-2017,13-May-2017,450,150.5
foo,S,0.90,SAR,13-May-2017,14-May-2017,100,100.25

Console Output

Amount USD settled incoming today == 10025.0
Amount USD settled Outgoing today == 24961.5
Identity  |  Buy/Sell  |  USD Amount  |  Rank
foo	|	B	|	10025.0	|	1
bar	|	S	|	14899.5	|	1
foo	|	S	|	9022.5	|	2
bar	|	S	|	1039.5	|	3




